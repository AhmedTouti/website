(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{156:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(158),s=n(157),a=n(0),o=n.n(a),i=n(159);class c extends a.Component{render(){return o.a.createElement(s.a,{children:this.props.children,transformCode:e=>`\nfunction () {\n  ${e}\n \n  const wrapperRef = useRef(null);\n   \n  useEffect(() => {\n    if (wrapperRef && wrapperRef.current && wrapperRef.current.childNodes.length === 0) {\n      grid.render(wrapperRef.current);\n    }\n  });\n  \n  return (\n    <div ref={wrapperRef} />\n  );\n}\n`,live:!0,scope:{Grid:r.f,html:r.l,h:r.k,gCreateRef:r.j,gComponent:r.e,PluginPosition:r.h,BaseComponent:r.b,BaseProps:r.BaseProps,CodeBlock:s.a,useEffect:a.useEffect,useRef:a.useRef,faker:i,...this.props.scope}})}}},80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return f}));var r=n(2),s=n(6),a=(n(0),n(155)),o=n(156),i=n(1545),c=n.n(i),l=(n(81),{id:"stock-market",title:"Stock Market",keywords:["javascript","table","javascript table","gridjs","grid js","formatting","stock market"]}),d={unversionedId:"examples/stock-market",id:"examples/stock-market",isDocsHomePage:!1,title:"Stock Market",description:"Grid.js can render complex elements in the table cells. In this example, we will take advantage of the builtin Virtual DOM",source:"@site/docs/examples/stock-market.md",slug:"/examples/stock-market",permalink:"/docs/examples/stock-market",editUrl:"https://github.com/grid-js/website/edit/master/docs/examples/stock-market.md",version:"current",lastUpdatedBy:"Afshin Mehrabani",lastUpdatedAt:1593637169,sidebar:"sidebar",previous:{title:"Custom sort",permalink:"/docs/examples/custom-sort"},next:{title:"Events",permalink:"/docs/examples/event-handler"}},p=[],m={rightToc:p};function f(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Grid.js can render complex elements in the table cells. In this example, we will take advantage of the builtin Virtual DOM\nand Chartist library to render line charts in cells."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { Grid, h, createRef as gCreateRef } from \"gridjs\";\nimport Chartist from 'chartist';\n")),Object(a.b)(o.a,{children:"\n// Chartist options\nconst opts = {\n  height: '30px',\n  showPoint: false,\n  fullWidth:true,\n  chartPadding: {top: 0,right: 0,bottom: 0,left: 0},\n  axisX: {showGrid: false, showLabel: false, offset: 0},\n  axisY: {showGrid: false, showLabel: false, offset: 0}\n};\nconst grid = new Grid({\n  sort: true,\n  columns: [\n    'Symbol',\n    'Last price',\n    { \n      name: 'Difference', \n      formatter: (cell) => {\n        return h('b', { style: {\n          'color': cell > 0 ? 'green' : 'red'\n        }}, cell);\n      }\n    },\n    {\n      name: 'Trend',\n      sort: false,\n      width: '100px',\n      formatter: (cell) => {\n        const ref = gCreateRef();\n        const chart = h('div', { ref: ref })\n        \n        // setTimeout to ensure that the chart wrapper is mounted\n        setTimeout(() => {\n          // render the chart based on cell data\n          ref.current && new Chartist.Line(ref.current, {\n            series: [cell]\n          }, opts);\n        }, 0);\n        \n        return chart;\n      }\n    }],\n  data: [\n    ['AAPL', 360.2, 20.19, [360, 363, 366, 361, 366, 350, 370]],\n    ['ETSY', 102.1, 8.22, [90, 91, 92, 90, 94, 95, 99, 102]],\n    ['AMZN', 2734.8, -30.01, [2779, 2786, 2792, 2780, 2750, 2765, 2740, 2734]],\n    ['TSLA', 960.85, -40.91, [993, 990, 985, 983, 970, 985, 988, 960]],\n  ]\n});\n",scope:{Chartist:c.a},mdxType:"LiveExample"}))}f.isMDXComponent=!0}}]);